{"ast":null,"code":"const moment = require(\"moment\");\n\nclass HttpService {\n  constructor() {\n    this.url = \"http://localhost:8080\";\n  }\n\n  async initLogin(username, password) {\n    const response = await fetch(`${this.url}/login`, {\n      body: JSON.stringify({\n        name: username,\n        password: password\n      }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json());\n    return response;\n  }\n\n  async getGroceries(userId) {\n    const response = await fetch(`${this.url}/grocery`, {\n      headers: {\n        'Authorization': `Bearer ${userId}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json());\n    const mapped = response.map(r => this.changeBackTimeFormat(r));\n    console.log('items', response);\n    return mapped;\n  }\n\n  async addGrocery(userId, groceryItem) {\n    const newItem = this.changeTimeFormat(groceryItem);\n    const serialized = JSON.stringify(newItem);\n    console.log(\"serialized\", serialized);\n    const response = await fetch(`${this.url}/grocery`, {\n      headers: {\n        'Authorization': `Bearer ${userId}`,\n        'Content-Type': 'application/json'\n      },\n      body: serialized,\n      method: 'POST'\n    }).then(resp => resp.json());\n    console.log(\"RESP\", response);\n\n    if (response.id == null) {\n      return response.message;\n    }\n\n    const formatted = this.changeBackTimeFormat(response);\n    return formatted;\n  }\n\n  async getReports(userId) {\n    const response = await fetch(`${this.url}/stats/all`, {\n      headers: {\n        'Authorization': `Bearer ${userId}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json());\n    return response;\n  }\n\n  async donateItem(userId, itemId) {\n    console.log('item id', itemId);\n    const response = await fetch(`${this.url}/donate?itemId=${itemId}`, {\n      headers: {\n        'Authorization': `Bearer ${userId}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'DELETE'\n    }).then(resp => resp.json());\n    return response;\n  }\n\n  async getCurrentDate() {\n    const response = await fetch(`${this.url}/date`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.text());\n    return this.stringToDate(response);\n  }\n\n  async changeDate(newDate) {\n    const response = await fetch(`${this.url}/date?newDate=${newDate.toLocaleDateString()}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'PUT'\n    }).then(resp => resp.text());\n    console.log(\"server resp\", response);\n    return this.stringToDate(response);\n  }\n\n  stringToDate(dateString) {\n    if (dateString === null) {\n      return null;\n    }\n\n    let split = dateString.split('/');\n    let month = parseInt(split[0]) - 1;\n    let day = parseInt(split[1]);\n    let year = parseInt(split[2]);\n    return new Date(year, month, day);\n  }\n\n  changeTimeFormat(groceryItem) {\n    const newItem = JSON.parse(JSON.stringify(groceryItem));\n    newItem.purchaseDate = groceryItem.purchaseDate.toLocaleDateString();\n\n    if (groceryItem.consumptionDate !== null) {\n      newItem.consumptionDate = groceryItem.consumptionDate.toLocaleString();\n    } else {\n      newItem.consumptionDate = null;\n    }\n\n    newItem.expirationDate = groceryItem.expirationDate.toLocaleDateString();\n    console.log(\"newi\", newItem);\n    return newItem;\n  }\n\n  changeBackTimeFormat(groceryItem) {\n    if (groceryItem === null) {\n      return null;\n    }\n\n    const newItem = JSON.parse(JSON.stringify(groceryItem));\n    newItem.purchaseDate = this.stringToDate(groceryItem.purchaseDate);\n    newItem.consumptionDate = this.stringToDate(groceryItem.consumptionDate);\n    newItem.expirationDate = this.stringToDate(groceryItem.expirationDate);\n    return newItem;\n  }\n\n}\n\nconst httpInstance = new HttpService();\nexport default httpInstance;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/A3/assignment-3-HusmanAndrei/frontend-wasteless-joi (1)/src/services/httpService.js"],"names":["moment","require","HttpService","constructor","url","initLogin","username","password","response","fetch","body","JSON","stringify","name","method","headers","then","json","getGroceries","userId","mapped","map","r","changeBackTimeFormat","console","log","addGrocery","groceryItem","newItem","changeTimeFormat","serialized","resp","id","message","formatted","getReports","donateItem","itemId","getCurrentDate","text","stringToDate","changeDate","newDate","toLocaleDateString","dateString","split","month","parseInt","day","year","Date","parse","purchaseDate","consumptionDate","toLocaleString","expirationDate","httpInstance"],"mappings":"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","sourcesContent":["const moment = require(\"moment\")\n\nclass HttpService{\n\n    constructor() {\n        this.url = \"http://localhost:8080\";\n    }\n\n    async initLogin(username, password){\n        const response = await fetch(`${this.url}/login`, {\n            body: JSON.stringify({\n                name: username,\n                password: password\n            }),\n            method: 'POST',\n            headers:  {'Content-Type' : 'application/json' }\n        }).then(response => response.json());\n        return response;\n    }\n\n    async getGroceries(userId){\n        const response = await fetch(`${this.url}/grocery`,{\n            headers: {\n                'Authorization' : `Bearer ${userId}`,\n                'Content-Type' : 'application/json'\n            }\n        }).then(response => response.json());\n        const mapped = response.map(r => this.changeBackTimeFormat(r));\n        console.log('items', response)\n\n        return mapped;\n    }\n\n    async addGrocery(userId, groceryItem){\n        const newItem =  this.changeTimeFormat(groceryItem);\n        const serialized = JSON.stringify(newItem);\n        console.log(\"serialized\", serialized)\n        const response = await fetch(`${this.url}/grocery`,{\n            headers: {\n                'Authorization' : `Bearer ${userId}`,\n                'Content-Type' : 'application/json'\n            },\n            body : serialized,\n            method : 'POST'\n        })\n            .then(resp => resp.json());\n        console.log(\"RESP\", response)\n        if( response.id == null){\n            return response.message;\n        }\n        const formatted = this.changeBackTimeFormat(response)\n\n        return formatted;\n    }\n\n    async getReports(userId){\n        const response = await fetch(`${this.url}/stats/all`,{\n            headers: {\n                'Authorization' : `Bearer ${userId}`,\n                'Content-Type' : 'application/json'\n            }\n        }).then(resp => resp.json());\n        return response;\n\n    }\n\n    async donateItem(userId, itemId){\n        console.log('item id', itemId)\n        const response = await fetch(`${this.url}/donate?itemId=${itemId}`,{\n            headers: {\n                'Authorization' : `Bearer ${userId}`,\n                'Content-Type' : 'application/json'\n            },\n            method: 'DELETE'\n        }).then(resp => resp.json());\n        return response;\n    }\n\n\n    async getCurrentDate(){\n        const response = await fetch(`${this.url}/date`,{\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(resp => resp.text());\n        return this.stringToDate(response);\n    }\n\n    async changeDate(newDate){\n\n        const response = await fetch(`${this.url}/date?newDate=${newDate.toLocaleDateString()}`,{\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n            method: 'PUT'\n        }).then(resp => resp.text());\n        console.log(\"server resp\", response)\n        return this.stringToDate(response);\n    }\n\n    stringToDate(dateString){\n        if (dateString === null){\n            return null;\n        }\n        let split = dateString.split('/')\n        let month = parseInt(split[0]) - 1;\n        let day = parseInt(split[1]);\n        let year = parseInt(split[2]);\n        return new Date(year, month, day)\n    }\n\n\n\n    changeTimeFormat(groceryItem){\n        const newItem = JSON.parse(JSON.stringify(groceryItem));\n        newItem.purchaseDate = groceryItem.purchaseDate.toLocaleDateString();\n        if(groceryItem.consumptionDate !== null){\n            newItem.consumptionDate = groceryItem.consumptionDate.toLocaleString();\n\n        }\n        else{\n            newItem.consumptionDate = null;\n        }\n        newItem.expirationDate = groceryItem.expirationDate.toLocaleDateString();\n        console.log(\"newi\", newItem)\n        return newItem;\n    }\n\n    changeBackTimeFormat(groceryItem){\n        if(groceryItem === null){\n            return null;\n        }\n        const newItem = JSON.parse(JSON.stringify(groceryItem))\n        newItem.purchaseDate = this.stringToDate(groceryItem.purchaseDate);\n        newItem.consumptionDate =  this.stringToDate(groceryItem.consumptionDate);\n        newItem.expirationDate = this.stringToDate(groceryItem.expirationDate);\n        return newItem;\n    }\n\n\n\n}\nconst httpInstance = new HttpService();\nexport default httpInstance;"]},"metadata":{},"sourceType":"module"}